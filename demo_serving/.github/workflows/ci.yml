name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  DOCKER_IMAGE: mlflow-serving
  REGISTRY: ghcr.io
  
jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make ci-install
        
    - name: Code formatting check
      run: |
        black --check app/ tests/ scripts/
        isort --check-only app/ tests/ scripts/
        
    - name: Linting
      run: make ci-lint
      
    - name: Type checking
      run: |
        mypy app/ --junit-xml=mypy-results.xml
        
    - name: Security scan
      run: make ci-security
      
    - name: Run tests
      run: make ci-test
      
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          test-results.xml
          coverage.xml
          htmlcov/
          flake8-report.txt
          bandit-report.json
          mypy-results.xml

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    services:
      minio:
        image: minio/minio:latest
        ports:
          - 9000:9000
          - 9001:9001
        env:
          MINIO_ROOT_USER: hadoop
          MINIO_ROOT_PASSWORD: hadoop
        options: --health-cmd "curl -f http://localhost:9000/minio/health/live" --health-interval 30s --health-timeout 20s --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        
    - name: Setup test environment
      run: |
        # Create test bucket and upload test artifacts
        docker run --rm --network host \
          -e MINIO_ROOT_USER=hadoop \
          -e MINIO_ROOT_PASSWORD=hadoop \
          minio/mc:latest sh -c "
          mc alias set local http://localhost:9000 hadoop hadoop &&
          mc mb local/test-bucket &&
          echo 'Test model artifact' > test-model.txt &&
          mc cp test-model.txt local/test-bucket/production_data/mlartifacts/1/
          "
          
    - name: Start application
      run: |
        export S3_ENDPOINT_URL=http://localhost:9000
        export S3_ACCESS_KEY=hadoop
        export S3_SECRET_KEY=hadoop
        export S3_BUCKET_NAME=test-bucket
        export MLFLOW_ARTIFACT_PATH=s3://test-bucket/production_data/mlartifacts/1
        python scripts/start_server.py --host 0.0.0.0 --port 8000 &
        sleep 30
        
    - name: Run integration tests
      run: |
        pytest tests/ -m integration -v
        python scripts/health_check.py --url http://localhost:8000

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, build, integration-test]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > ~/.kube/config
        
    - name: Deploy to staging
      run: |
        kubectl set image deployment/mlflow-serving \
          mlflow-serving=${{ env.REGISTRY }}/${{ github.repository }}:develop \
          -n mlflow-serving-staging
          
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mlflow-serving -n mlflow-serving-staging
        kubectl get pods -n mlflow-serving-staging

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build, integration-test, security-scan]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > ~/.kube/config
        
    - name: Deploy to production
      run: |
        kubectl set image deployment/mlflow-serving \
          mlflow-serving=${{ env.REGISTRY }}/${{ github.repository }}:${{ github.event.release.tag_name }} \
          -n mlflow-serving-production
          
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mlflow-serving -n mlflow-serving-production
        kubectl get pods -n mlflow-serving-production
        
    - name: Run production health checks
      run: |
        # Wait for deployment to be ready
        sleep 60
        # Run comprehensive health checks
        kubectl port-forward service/mlflow-serving 8080:80 -n mlflow-serving-production &
        sleep 10
        python scripts/health_check.py --url http://localhost:8080
        pkill -f "kubectl port-forward" || true

  notify:
    name: Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "üöÄ Production deployment successful!"
        # Add your notification logic here (Slack, Teams, etc.)
        
    - name: Notify on failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "‚ùå Production deployment failed!"
        # Add your notification logic here (Slack, Teams, etc.)