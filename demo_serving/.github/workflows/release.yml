name: Release Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

env:
  DOCKER_IMAGE: mlflow-serving
  REGISTRY: ghcr.io

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
        if [ -z "$PREV_TAG" ]; then
          COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
        else
          COMMITS=$(git log ${PREV_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        echo "## What's Changed" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "$COMMITS" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...${GITHUB_REF_NAME}" >> CHANGELOG.md
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: false

  build-multi-arch:
    name: Build Multi-Architecture Images
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract version
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Build and push release image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version.outputs.VERSION }}
          ${{ env.REGISTRY }}/${{ github.repository }}:latest
        labels: |
          org.opencontainers.image.title=MLflow Serving
          org.opencontainers.image.description=Production-ready MLflow model serving
          org.opencontainers.image.version=${{ steps.version.outputs.VERSION }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ steps.date.outputs.date }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish-helm-chart:
    name: Publish Helm Chart
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: 'v3.12.0'
        
    - name: Create Helm chart
      run: |
        mkdir -p helm-chart/mlflow-serving
        
        cat > helm-chart/mlflow-serving/Chart.yaml << 'EOF'
        apiVersion: v2
        name: mlflow-serving
        description: A Helm chart for MLflow Model Serving
        version: ${{ github.ref_name }}
        appVersion: ${{ github.ref_name }}
        home: https://github.com/${{ github.repository }}
        sources:
        - https://github.com/${{ github.repository }}
        maintainers:
        - name: MLOps Team
          email: mlops@example.com
        EOF
        
        # Copy Kubernetes manifests as Helm templates
        mkdir -p helm-chart/mlflow-serving/templates
        cp k8s/*.yaml helm-chart/mlflow-serving/templates/
        
        # Create values.yaml
        cat > helm-chart/mlflow-serving/values.yaml << 'EOF'
        image:
          repository: ${{ env.REGISTRY }}/${{ github.repository }}
          tag: ${{ github.ref_name }}
          pullPolicy: IfNotPresent
        
        replicaCount: 2
        
        service:
          type: ClusterIP
          port: 80
          targetPort: 8000
        
        ingress:
          enabled: true
          className: nginx
          host: mlflow-serving.example.com
        
        resources:
          limits:
            cpu: 1000m
            memory: 2Gi
          requests:
            cpu: 500m
            memory: 1Gi
        
        autoscaling:
          enabled: true
          minReplicas: 2
          maxReplicas: 10
          targetCPUUtilizationPercentage: 70
        
        monitoring:
          enabled: true
          serviceMonitor:
            enabled: true
        EOF
        
    - name: Package Helm chart
      run: |
        helm package helm-chart/mlflow-serving
        
    - name: Upload Helm chart to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./mlflow-serving-${{ github.ref_name }}.tgz
        asset_name: mlflow-serving-${{ github.ref_name }}.tgz
        asset_content_type: application/gzip

  security-release-scan:
    name: Security Scan for Release
    runs-on: ubuntu-latest
    needs: build-multi-arch
    
    steps:
    - name: Run comprehensive security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
        format: 'json'
        output: 'security-report.json'
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.json

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-multi-arch, publish-helm-chart]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.build-multi-arch.result == 'success'
      run: |
        echo "🎉 New release published: ${{ github.ref_name }}"
        echo "📦 Container image: ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}"
        echo "☸️ Helm chart available in release assets"
        # Add your notification logic here
        
    - name: Notify failure
      if: needs.build-multi-arch.result == 'failure'
      run: |
        echo "❌ Release build failed for ${{ github.ref_name }}"
        # Add your notification logic here